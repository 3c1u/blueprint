// Copyright 2016 Palantir Technologies, Inc. All rights reserved.
// Licensed under the terms of the LICENSE file distributed with this project.

@import "../../common/variables";
@import "../button/common";
@import "../spinner/common";

/*
Input groups

Markup:
<div class="pt-input-group {{.modifier}}" {{:modifier}}>
  <span class="pt-icon-standard pt-icon-filter"></span>
  <input type="text" class="pt-input" {{:modifier}} placeholder="Filter histogram..." />
</div>
<div class="pt-input-group {{.modifier}}" {{:modifier}}>
  <input type="password" class="pt-input" {{:modifier}} placeholder="Enter your password..." />
  <button class="pt-button pt-minimal pt-intent-warning pt-icon-lock" {{:modifier}}></button>
</div>
<div class="pt-input-group {{.modifier}}" {{:modifier}}>
  <span class="pt-icon-standard pt-icon-search"></span>
  <input type="text" class="pt-input" {{:modifier}} placeholder="Search" />
  <button class="pt-button pt-minimal pt-intent-primary" {{:modifier}}>
    Go
    <span class="pt-icon-standard pt-icon-arrow-right"></span>
  </button>
</div>

:disabled - Disabled input. Must be added separately to the <code>&#60;input&#62;</code> and <code>&#60;button&#62;</code>.
.pt-round - Rounded caps. Button will also be rounded.
.pt-intent-primary - Primary intent. (All 4 intents are supported.)
.pt-large - Large group. Children will adjust size accordingly.
.pt-fill - Fill the parent container.

Styleguide pt-input-group
*/

// 3px space between small button and regular input
$input-button-height: $pt-button-height - 6px !default;
// 5px space between regular button and large input
$input-button-height-large: $pt-button-height !default;

.pt-input-group {
  @include pt-flex-parent();
  border-radius: $pt-border-radius;
  box-shadow: input-transition-shadow($input-shadow-color-focus), $pt-input-box-shadow;
  background: $input-background-color;

  &.pt-fill {
    @include pt-flex-parent-fill();
  }

  &:focus,
  &.pt-active {
    box-shadow: input-transition-shadow($input-shadow-color-focus, true), $input-box-shadow-focus;
  }

  // adding more specificity here so it also works when .pt-dark applied
  input.pt-input {
    @include pt-flex-child-fill();
    box-shadow: none;
    background: none;

    // take out padding if there's something before or after the input
    &:not(:first-child) {
      padding-left: 0;
    }

    &:not(:last-child) {
      padding-right: 0;
    }

    // .pt-input-group now handles showing the active state
    &:focus,
    &.pt-active {
      box-shadow: none;
    }
  }

  > :nth-child(3),
  > :nth-child(2):not(.pt-input) {
    @include pt-flex-child();
  }

  .pt-button {
    @include pt-button-height($input-button-height);
    margin: ($pt-input-height - $input-button-height) / 2;
    padding-top: 0;
    padding-bottom: 0;
  }

  > .pt-icon-standard {
    padding: 0 ($pt-input-height - $pt-icon-size-standard) / 2;
  }

  .pt-icon-standard {
    color: $pt-icon-color;
  }

  // adjusting the margin of spinners in input groups
  // we have to avoid targetting buttons that contain a spinner
  .pt-input-action {
    > .pt-spinner {
      display: block;
      margin: ($pt-input-height - $spinner-width * $spinner-width-factor-small) / 2;
    }
  }

  .pt-tag {
    margin: $pt-grid-size / 2;
  }

  // all buttons go gray in default state and assume their native colors only when hovered
  // or when input is focused. this prevents distracting colors in the UI.
  .pt-input:not(:focus) + .pt-button,
  .pt-input:not(:focus) + .pt-input-action .pt-button {
    &.pt-minimal:not(:hover):not(:focus) {
      color: $pt-text-color-muted;

      // same goes for dark
      // stylelint-disable-next-line selector-max-compound-selectors
      .pt-dark & {
        color: $pt-dark-text-color-muted;
      }

      #{$icon-classes} {
        color: $pt-icon-color;
      }
    }

    &.pt-minimal:disabled {
      // override more specific selector above
      // stylelint-disable declaration-no-important
      color: $pt-icon-color-disabled !important;

      #{$icon-classes} {
        color: $pt-icon-color-disabled !important;
      }
    }
  }

  // this class echoes `input:disabled` on the child input, but each action must individually be disabled
  &[disabled],
  &.pt-disabled {
    // note that enabled buttons inside this input group are still clickable
    @include pt-input-disabled();

    .pt-icon-standard {
      color: $input-color-disabled;
    }

    // adding more specificity here so it also works when .pt-dark applied
    input.pt-input {
      background: none;
    }

    .pt-icon {
      @include pt-input-disabled();
    }
  }

  &.pt-large {
    .pt-button {
      @include pt-button-height($input-button-height-large);
      margin: ($pt-input-height-large - $input-button-height-large) / 2;
      line-height: 0;
    }

    > .pt-icon-standard {
      padding: 0 ($pt-input-height-large - $pt-icon-size-standard) / 2;
    }

    .pt-input {
      @include pt-input-large();

      // take out padding if there's something before or after the input
      &:not(:first-child) {
        padding-left: 0;
      }

      &:not(:last-child) {
        padding-right: 0;
      }
    }

    .pt-input-action > .pt-spinner {
      margin: ($pt-input-height-large - $spinner-width * $spinner-width-factor-small) / 2;
    }
  }

  &.pt-round,
  &.pt-round .pt-button,
  &.pt-round .pt-tag, {
    border-radius: $pt-input-height;
  }

  .pt-dark & {
    box-shadow: input-transition-shadow($dark-input-shadow-color-focus), $pt-dark-input-box-shadow;
    background: $dark-input-background-color;

    .pt-icon-standard {
      color: $pt-dark-icon-color;
    }

    &[disabled],
    &.pt-disabled {
      @include pt-dark-input-disabled();

      .pt-icon-standard {
        color: $dark-input-color-disabled;
      }
    }
  }

  @each $intent, $color in $pt-intent-colors {
    &.pt-intent-#{$intent} {
      @include pt-input-intent($color);

      .pt-icon-standard {
        color: map-get($pt-intent-text-colors, $intent);

        .pt-dark & {
          color: map-get($pt-dark-intent-text-colors, $intent);
        }
      }
    }
  }
}
